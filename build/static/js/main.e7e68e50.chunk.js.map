{"version":3,"sources":["components/navbar.component.js","components/exercises-list.component.js","components/edit-exercise.component.js","components/create-exercise.component.js","components/create-user.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","console","log","className","to","Component","ExercisesList","EditExercise","CreateExercise","props","onChangeUsername","bind","onChangeDescription","onChangeDuration","onChangeDate","onSubmit","state","username","description","duration","date","Date","users","this","setState","e","target","value","preventDefault","exercise","window","location","ref","required","onChange","map","user","key","type","selected","CreateUser","newUser","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7e68e50.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n\n  render() {\n    console.log(\"RENDERING STARTED\")\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">ExcerTracker</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"nav-link\">Exercises</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/create\" className=\"nav-link\">Create Exercise Log</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/user\" className=\"nav-link\">Create User</Link>\n          </li>\n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class ExercisesList extends Component {\n  render() {\n    return (\n      <div>\n        <p>You are on the Exercises List component!</p>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class EditExercise extends Component {\n  render() {\n    return (\n      <div>\n        <p>You are on the Edit Exercise component!</p>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default class CreateExercise extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeDuration = this.onChangeDuration.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      username: '',\n      description: '',\n      duration: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ \n      users: ['test user'],\n      username: 'test user'\n    });\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  onChangeDuration(e) {\n    this.setState({\n      duration: e.target.value\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    console.log(\"HIER\")\n  \n    const exercise = {\n      username: this.state.username,\n      description: this.state.description,\n      duration: this.state.duration,\n      date: this.state.date,\n    };\n  \n    console.log(exercise);\n    \n    window.location = '/';\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Create New Exercise Log</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <select ref=\"userInput\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}>\n                {\n                  this.state.users.map(function(user) {\n                    return <option \n                      key={user}\n                      value={user}>{user}\n                      </option>;\n                  })\n                }\n            </select>\n          </div>\n          <div className=\"form-group\"> \n            <label>Description: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Duration (in minutes): </label>\n            <input \n                type=\"text\" \n                className=\"form-control\"\n                value={this.state.duration}\n                onChange={this.onChangeDuration}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Date: </label>\n            <div>\n              <DatePicker\n                selected={this.state.date}\n                onChange={this.onChangeDate}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create Exercise Log\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","\nimport React, { Component } from 'react';\n\nexport default class CreateUser extends Component {\n\tconstructor(props) {\n\t\t  super(props);\n\t\t  this.onChangeUsername = this.onChangeUsername.bind(this);\n\t\t  this.onSubmit = this.onSubmit.bind(this);\n\t\t  this.state = {\n\t\t    username: ''\n\t\t  };\n\t\t}\n\n\tonChangeUsername(e) {\n\t  this.setState({\n\t    username: e.target.value\n\t  });\n\t}\n\tonSubmit(e) {\n\t  e.preventDefault();\n\t  const newUser = {\n\t    username: this.state.username,\n\t  };\n\t  console.log(newUser);\n\t  \n\t  this.setState({\n\t    username: ''\n\t  })\n\t}\n\n\n  render() {\n    return (\n      <div>\n        <div>\n\t\t  <h3>Create New User</h3>\n\t\t  <form onSubmit={this.onSubmit}>\n\t\t    <div className=\"form-group\"> \n\t\t      <label>Username: </label>\n\t\t      <input  type=\"text\"\n\t\t          required\n\t\t          className=\"form-control\"\n\t\t          value={this.state.username}\n\t\t          onChange={this.onChangeUsername}\n\t\t          />\n\t\t    </div>\n\t\t    <div className=\"form-group\">\n\t\t      <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\" />\n\t\t    </div>\n\t\t  </form>\n\t\t</div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Navbar from \"./components/navbar.component\"\nimport ExercisesList from \"./components/exercises-list.component\";\nimport EditExercise from \"./components/edit-exercise.component\";\nimport CreateExercise from \"./components/create-exercise.component\";\nimport CreateUser from \"./components/create-user.component\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Navbar />\n        <br/>\n        <Route path=\"/\" exact component={ExercisesList} />\n        <Route path=\"/edit/:id\" component={EditExercise} />\n        <Route path=\"/create\" component={CreateExercise} />\n        <Route path=\"/user\" component={CreateUser} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}